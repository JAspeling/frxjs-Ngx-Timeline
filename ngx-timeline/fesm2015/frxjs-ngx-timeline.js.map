{"version":3,"file":"frxjs-ngx-timeline.js","sources":["../../../projects/ngx-timeline/src/lib/models/NgxConfigObj.ts","../../../projects/ngx-timeline/src/lib/models/NgxTimelineEvent.ts","../../../projects/ngx-timeline/src/lib/components/ngx-timeline.component.ts","../../../projects/ngx-timeline/src/lib/components/ngx-timeline-event/ngx-timeline-event.component.ts","../../../projects/ngx-timeline/src/lib/pipes/ngx-date-pipe.ts","../../../projects/ngx-timeline/src/lib/ngx-timeline.module.ts","../../../projects/ngx-timeline/src/public-api.ts","../../../projects/ngx-timeline/src/frxjs-ngx-timeline.ts"],"sourcesContent":["export let supportedLanguageCodes = ['en', 'it', 'fr', 'de', 'es'];\r\n\r\nexport interface NgxConfigDate {\r\n  code: string;\r\n  dayMonthYear: string;\r\n  fullDate: string;\r\n  hoursMinutes: string;\r\n  monthYear: string;\r\n  year: string;\r\n}\r\n\r\nexport interface NgxDateObjMap {\r\n  [key: string]: NgxConfigDate;\r\n}\r\n\r\nexport let dateConfigMap: NgxDateObjMap = {\r\n  en: {\r\n    code: 'en-US',\r\n    fullDate: 'MM/dd/yyyy h:mm a',\r\n    dayMonthYear: 'dd MMMM yyyy',\r\n    monthYear: 'MMMM yyyy',\r\n    year: 'yyyy',\r\n    hoursMinutes: 'hh:mm a'\r\n  },\r\n  it: {\r\n    code: 'it-IT',\r\n    fullDate: 'dd/MM/yyyy H:mm',\r\n    dayMonthYear: 'dd MMMM yyyy',\r\n    monthYear: 'MMMM yyyy',\r\n    year: 'yyyy',\r\n    hoursMinutes: 'HH:mm'\r\n  },\r\n  fr: {\r\n    code: 'fr-FR',\r\n    fullDate: 'dd/MM/yyyy H:mm',\r\n    dayMonthYear: 'dd MMMM yyyy',\r\n    monthYear: 'MMMM yyyy',\r\n    year: 'yyyy',\r\n    hoursMinutes: 'HH:mm'\r\n  },\r\n  de: {\r\n    code: 'de',\r\n    fullDate: 'dd/MM/yyyy H:mm',\r\n    dayMonthYear: 'dd MMMM yyyy',\r\n    monthYear: 'MMMM yyyy',\r\n    year: 'yyyy',\r\n    hoursMinutes: 'HH:mm'\r\n  },\r\n  es: {\r\n    code: 'es',\r\n    fullDate: 'dd/MM/yyyy H:mm',\r\n    dayMonthYear: 'dd MMMM yyyy',\r\n    monthYear: 'MMMM yyyy',\r\n    year: 'yyyy',\r\n    hoursMinutes: 'HH:mm'\r\n  }\r\n};\r\n\r\nexport enum NgxDateFormat {\r\n  DAY_MONTH_YEAR  = 'DAY_MONTH_YEAR',\r\n  FULL_DATE  = 'FULL_DATE',\r\n  MONTH_YEAR  = 'MONTH_YEAR',\r\n  HOURS_MINUTES = 'HOURS_MINUTES',\r\n  YEAR  = 'YEAR'\r\n}\r\n\r\nexport let fieldConfigDate = {\r\n  MONTH_YEAR: 'monthYear',\r\n  YEAR: 'year',\r\n  HOURS_MINUTES: 'hoursMinutes',\r\n  FULL_DATE: 'fullDate',\r\n  DAY_MONTH_YEAR: 'dayMonthYear'\r\n}\r\n\r\n/**\r\n * Enum used to set the group event logic\r\n */\r\nexport enum NgxTimelineEventGroup {\r\n  YEAR = 'YEAR',\r\n  MONTH_YEAR = 'MONTH_YEAR',\r\n  DAY_MONTH_YEAR = 'DAY_MONTH_YEAR'\r\n}\r\n\r\nexport let fieldsToAddEventGroup = {\r\n  YEAR: ['getFullYear'],\r\n  MONTH_YEAR: ['getFullYear', 'getMonth'],\r\n  DAY_MONTH_YEAR: ['getFullYear', 'getMonth', 'getDate']\r\n};\r\n\r\nexport let periodKeyDateFormat = {\r\n  YEAR: NgxDateFormat.YEAR,\r\n  MONTH_YEAR: NgxDateFormat.MONTH_YEAR,\r\n  DAY_MONTH_YEAR: NgxDateFormat.DAY_MONTH_YEAR,\r\n};\r\n\r\n/**\r\n * Enum used to set the change side event logic\r\n */\r\nexport enum NgxTimelineEventChangeSideInGroup {\r\n  ALL = 'ALL',\r\n  ON_DIFFERENT_HMS = 'ON_DIFFERENT_HMS',\r\n  ON_DIFFERENT_DAY = 'ON_DIFFERENT_DAY',\r\n  ON_DIFFERENT_MONTH = 'ON_DIFFERENT_MONTH'\r\n}\r\n\r\nexport let fieldsToCheckEventChangeSideInGroup = {\r\n  ON_DIFFERENT_MONTH: ['getFullYear', 'getMonth'],\r\n  ON_DIFFERENT_DAY: ['getFullYear', 'getMonth', 'getDate'],\r\n  ON_DIFFERENT_HMS: ['getFullYear', 'getMonth', 'getDate', 'getHours', 'getMinutes', 'getSeconds']\r\n};\r\n","/**\r\n * Event to be provided from outside the timeline\r\n */\r\nexport interface NgxTimelineEvent {\r\n  timestamp?: Date;\r\n  title?: string;\r\n  description?: string;\r\n  id?: any;\r\n}\r\n\r\nexport interface NgxTimelinePeriodInfo {\r\n  periodKey?: string;\r\n  year?: number;\r\n  month?: number;\r\n  day?: number;\r\n  firstDate: any;\r\n}\r\n\r\n/**\r\n * Item used inside the timeline\r\n */\r\nexport interface NgxTimelineItem {\r\n  type?: string;\r\n  position?: NgxTimelineItemPosition.ON_LEFT | NgxTimelineItemPosition.ON_RIGHT;\r\n  periodInfo?: NgxTimelinePeriodInfo;\r\n  eventInfo?: NgxTimelineEvent;\r\n}\r\n\r\nexport enum NgxTimelineItemPosition {\r\n  ON_LEFT = 'ON_LEFT',\r\n  ON_RIGHT = 'ON_RIGHT'\r\n}\r\n","import { Component, OnInit, Input, TemplateRef, OnChanges, SimpleChanges, Output } from '@angular/core';\nimport {\n  NgxTimelineEvent,\n  NgxTimelineItem,\n  NgxTimelineItemPosition,\n  NgxTimelinePeriodInfo,\n  NgxDateFormat,\n  NgxTimelineEventGroup,\n  NgxTimelineEventChangeSideInGroup,\n  periodKeyDateFormat,\n  fieldsToCheckEventChangeSideInGroup,\n  fieldsToAddEventGroup } from '../models';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'ngx-timeline',\n  templateUrl: './ngx-timeline.component.html',\n  styleUrls: ['./ngx-timeline.scss'],\n})\nexport class NgxTimelineComponent implements OnInit, OnChanges {\n  /**\n   * List of events to be displayed\n   */\n  @Input() events: NgxTimelineEvent[];\n  /**\n   * Language code used to show the date formatted\n   */\n  @Input() langCode?: string;\n  /**\n   * Boolean used to enable or disable the animations\n   */\n  @Input() enableAnimation = true;\n  /**\n   * Logic to be applied in order to group events\n   */\n  @Input() groupEvent?: NgxTimelineEventGroup = NgxTimelineEventGroup.MONTH_YEAR;\n  /**\n   * Logic to be applied in order to put evetns on LEFT or RIGHT\n   */\n  @Input() changeSideInGroup?: NgxTimelineEventChangeSideInGroup = NgxTimelineEventChangeSideInGroup.ON_DIFFERENT_DAY;\n  /**\n   * Custom Template displayed before a group of events\n   */\n  @Input() periodCustomTemplate: TemplateRef<any>;\n  /**\n   * Custom Template displayed to show a single event\n   */\n  @Input() eventCustomTemplate: TemplateRef<any>;\n  /**\n   * Custom Template displayed to show an separator icon\n   */\n  @Input() centerIconCustomTemplate: TemplateRef<any>;\n  /**\n   * Custom Template displayed to show the side date\n   */\n  @Input() dateInstantCustomTemplate: TemplateRef<any>;\n  /**\n   * Custom Template displayed to show the inner event\n   */\n  @Input() innerEventCustomTemplate: TemplateRef<any>;\n  /**\n   * Output click event emitter\n   */\n  @Output()\n  clickEmitter: BehaviorSubject<NgxTimelineItem> = new BehaviorSubject(null);\n\n  groups: { [key: string]: NgxTimelineEvent[] } = {};\n  periods: NgxTimelineItem[] = [];\n  items: NgxTimelineItem[] = [];\n  ngxTimelineItemPosition = NgxTimelineItemPosition;\n  ngxDateFormat = NgxDateFormat;\n\n  private readonly separator = '/';\n\n  constructor() {}\n\n\n  ngOnInit(): void {\n    this.groupEvents(this.events);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.groupEvents(this.events);\n  }\n\n  getPeriodKeyDateFormat(): string {\n    return periodKeyDateFormat[this.groupEvent];\n  }\n\n  protected clear(): void {\n    this.groups = {};\n    this.periods = [];\n    this.items = [];\n  }\n\n  protected groupEvents(events: NgxTimelineEvent[]): void {\n    if (events) {\n      this.clear();\n      this.sortEvents(events);\n      this.setGroups(events);\n      this.setPeriods();\n      this.setItems();\n    }\n  }\n\n  protected sortEvents(events: NgxTimelineEvent[]): void {\n    events.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n\n  protected setGroups(events: NgxTimelineEvent[]): void {\n    events.forEach((event) => {\n      // conversion from string to actual Date\n      event.timestamp = new Date(event.timestamp);\n      const periodKey = this.getPeriodKeyFromEvent(event);\n      if (!this.groups[periodKey]) {\n        this.groups[periodKey] = [];\n      }\n      this.groups[periodKey].push(event);\n    });\n  }\n\n  protected setItems(): void {\n    this.periods.forEach((p) => {\n      // insert first the period\n      this.items.push(p);\n      // in each period putting items on left\n      const onLeft = true;\n      const periodInfo = p.periodInfo;\n      // insert then all the events in this period\n      this.addPeriodEvents(periodInfo, onLeft);\n      // onLeft = this.addEventItemsAndGetIfOnLeft(periodInfo, onLeft);\n    });\n  }\n\n  protected addPeriodEvents(periodInfo: NgxTimelinePeriodInfo, onLeft: boolean): void {\n    this.groups[periodInfo.periodKey].forEach((event, index) => {\n      const prevEvent = this.groups[periodInfo.periodKey][index - 1];\n      if (index > 0 && this.compareEvents(prevEvent, event)) {\n        onLeft = !onLeft;\n      }\n      this.pushEventOnItems(event, onLeft);\n    });\n    // return onLeft;\n  }\n\n  protected pushEventOnItems(event: NgxTimelineEvent, onLeft: boolean): void {\n    this.items.push({\n      eventInfo: { ...event }, position: onLeft ?\n        this.ngxTimelineItemPosition.ON_LEFT : this.ngxTimelineItemPosition.ON_RIGHT\n    });\n  }\n\n  /**\n   * Compare the events inside the same group\n   */\n  protected compareEvents(prevEvent: NgxTimelineEvent, event: NgxTimelineEvent): boolean {\n    return this.changeSideInGroup === NgxTimelineEventChangeSideInGroup.ALL ||\n      this.compareEventsField(prevEvent, event, ...fieldsToCheckEventChangeSideInGroup[this.changeSideInGroup]);\n  }\n\n  protected compareEventsField(prevEvent: NgxTimelineEvent, event: NgxTimelineEvent, ...fields: string[]): boolean {\n    return fields.reduce((res, field) => res = res || prevEvent.timestamp[field]() !== event.timestamp[field](), !!false);\n  }\n\n  protected setPeriods(): void {\n    this.periods = Object.keys(this.groups).map((periodKey) => {\n      const split = periodKey.split(this.separator);\n      return this.getPeriodInfo(split, periodKey);\n    });\n  }\n\n  private getPeriodInfo(split: string[], periodKey: string): { periodInfo: NgxTimelinePeriodInfo } {\n    return {\n      periodInfo: {\n        year: Number(split[0]),\n        month: Number(split[1]),\n        day: Number(split[2]),\n        periodKey,\n        firstDate: this.groups[periodKey][0].timestamp as Date,\n      },\n    };\n  }\n\n  protected getPeriodKeyFromEvent(event: NgxTimelineEvent): string {\n    return fieldsToAddEventGroup[this.groupEvent].map(field => event.timestamp[field]()).join(this.separator);\n  }\n}\n","import { Component, Input, Output, TemplateRef } from '@angular/core';\nimport { NgxTimelineItem, NgxTimelineItemPosition } from '../../models/NgxTimelineEvent';\nimport { DatePipe } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport { supportedLanguageCodes } from '../../models';\n\n@Component({\n  selector: 'ngx-timeline-event',\n  templateUrl: './ngx-timeline-event.component.html',\n  styleUrls: ['./ngx-timeline-event.component.scss']\n})\nexport class NgxTimelineEventComponent {\n\n  /**\n   * Event to be displayed\n   */\n  @Input() event: NgxTimelineItem;\n  /**\n   * Event position respect to the vertical line (LEFT or RIGHT)\n   */\n  @Input() colSidePosition: NgxTimelineItemPosition;\n  /**\n   * Language code used to format the dates\n   */\n  @Input() langCode?: string;\n  /**\n   * Inner custom template used to display the event detail\n   */\n  @Input() innerEventCustomTemplate?: TemplateRef<any>;\n  /**\n   * Boolean used to enable or disable the animations\n   */\n  @Input() enableAnimation = true;\n  /**\n   * Output click event emitter\n   */\n  @Output() clickEmitter: BehaviorSubject<NgxTimelineItem> = new BehaviorSubject(null);\n\n  ngxTimelineItemPosition = NgxTimelineItemPosition;\n\n  private readonly monthAbbr = 'MMM';\n  private readonly dayFormat = 'dd';\n\n  constructor() { }\n\n  protected getDateObj(): any {\n    let day;\n    let month;\n    let year;\n    const dateTimestamp = this.event.eventInfo?.timestamp;\n    if (dateTimestamp) {\n      const timestamp = new Date(dateTimestamp);\n      const langCode = this.getLangCode();\n      month = new DatePipe(langCode).transform(timestamp, this.monthAbbr);\n      day = new DatePipe(langCode).transform(timestamp, this.dayFormat);\n      year = timestamp.getFullYear();\n    }\n\n    return {day, month, year};\n  }\n\n  protected getLangCode(): string  {\n    return this.langCode && supportedLanguageCodes.includes(this.langCode) ? this.langCode : supportedLanguageCodes[0];\n  }\n\n}\n","import { DatePipe } from '@angular/common';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { NgxConfigDate, NgxDateObjMap, NgxDateFormat, supportedLanguageCodes, fieldConfigDate, dateConfigMap } from '../models';\r\n\r\n@Pipe({ name: 'ngxdate', pure: false })\r\nexport class NgxDatePipe implements PipeTransform {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  transform(date: Date | string, dateFormat?: string, langCode?: string): string {\r\n    let transformedDate = null;\r\n    if (date) {\r\n      const objDate = this.getDateConfig(langCode);\r\n      transformedDate = new DatePipe(objDate.code).transform(new Date(date), this.dateFormat(dateFormat, objDate));\r\n    }\r\n    return transformedDate;\r\n  }\r\n\r\n  private dateFormat(dateFormat: string, configDate: NgxConfigDate): string {\r\n    return configDate[fieldConfigDate[dateFormat]];\r\n  }\r\n\r\n  private getDateConfig(langCode: string): NgxConfigDate {\r\n    const code = langCode || supportedLanguageCodes[0];\r\n    const configDate = dateConfigMap[code] || dateConfigMap[supportedLanguageCodes[0]];\r\n    return configDate;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { NgxTimelineComponent } from './components/ngx-timeline.component';\nimport { NgxTimelineEventComponent } from './components/ngx-timeline-event/ngx-timeline-event.component';\nimport { CommonModule, registerLocaleData } from '@angular/common';\nimport { NgxDatePipe } from './pipes/ngx-date-pipe';\nimport localeIt from '@angular/common/locales/it';\nimport localeFr from '@angular/common/locales/fr';\nimport localeDe from '@angular/common/locales/de';\nimport localeEs from '@angular/common/locales/es';\n\nregisterLocaleData(localeIt);\nregisterLocaleData(localeFr);\nregisterLocaleData(localeDe);\nregisterLocaleData(localeEs);\n\n@NgModule({\n  declarations: [NgxTimelineComponent, NgxTimelineEventComponent, NgxDatePipe],\n  imports: [CommonModule],\n  exports: [NgxTimelineComponent, NgxDatePipe]\n})\nexport class NgxTimelineModule { }\n","/*\n * Public API Surface of ngx-timeline\n */\nexport * from './lib/components';\nexport * from './lib/models';\nexport * from './lib/pipes/';\nexport * from './lib/ngx-timeline.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {NgxTimelineEventComponent as ɵb} from './lib/components/ngx-timeline-event/ngx-timeline-event.component';\nexport {NgxTimelineComponent as ɵa} from './lib/components/ngx-timeline.component';\nexport {NgxDatePipe as ɵc} from './lib/pipes/ngx-date-pipe';"],"names":[],"mappings":"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"}