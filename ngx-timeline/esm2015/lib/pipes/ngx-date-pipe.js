import { DatePipe } from '@angular/common';
import { Pipe } from '@angular/core';
import { supportedLanguageCodes, fieldConfigDate, dateConfigMap } from '../models';
export class NgxDatePipe {
    constructor() {
    }
    transform(date, dateFormat, langCode) {
        let transformedDate = null;
        if (date) {
            const objDate = this.getDateConfig(langCode);
            transformedDate = new DatePipe(objDate.code).transform(new Date(date), this.dateFormat(dateFormat, objDate));
        }
        return transformedDate;
    }
    dateFormat(dateFormat, configDate) {
        return configDate[fieldConfigDate[dateFormat]];
    }
    getDateConfig(langCode) {
        const code = langCode || supportedLanguageCodes[0];
        const configDate = dateConfigMap[code] || dateConfigMap[supportedLanguageCodes[0]];
        return configDate;
    }
}
NgxDatePipe.decorators = [
    { type: Pipe, args: [{ name: 'ngxdate', pure: false },] }
];
NgxDatePipe.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGUtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10aW1lbGluZS9zcmMvbGliL3BpcGVzL25neC1kYXRlLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBK0Msc0JBQXNCLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUdoSSxNQUFNLE9BQU8sV0FBVztJQUV0QjtJQUNBLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBbUIsRUFBRSxVQUFtQixFQUFFLFFBQWlCO1FBQ25FLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0MsZUFBZSxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUM5RztRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxVQUFVLENBQUMsVUFBa0IsRUFBRSxVQUF5QjtRQUM5RCxPQUFPLFVBQVUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU8sYUFBYSxDQUFDLFFBQWdCO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLFFBQVEsSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksYUFBYSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7O1lBdkJGLElBQUksU0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hDb25maWdEYXRlLCBOZ3hEYXRlT2JqTWFwLCBOZ3hEYXRlRm9ybWF0LCBzdXBwb3J0ZWRMYW5ndWFnZUNvZGVzLCBmaWVsZENvbmZpZ0RhdGUsIGRhdGVDb25maWdNYXAgfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuQFBpcGUoeyBuYW1lOiAnbmd4ZGF0ZScsIHB1cmU6IGZhbHNlIH0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybShkYXRlOiBEYXRlIHwgc3RyaW5nLCBkYXRlRm9ybWF0Pzogc3RyaW5nLCBsYW5nQ29kZT86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBsZXQgdHJhbnNmb3JtZWREYXRlID0gbnVsbDtcclxuICAgIGlmIChkYXRlKSB7XHJcbiAgICAgIGNvbnN0IG9iakRhdGUgPSB0aGlzLmdldERhdGVDb25maWcobGFuZ0NvZGUpO1xyXG4gICAgICB0cmFuc2Zvcm1lZERhdGUgPSBuZXcgRGF0ZVBpcGUob2JqRGF0ZS5jb2RlKS50cmFuc2Zvcm0obmV3IERhdGUoZGF0ZSksIHRoaXMuZGF0ZUZvcm1hdChkYXRlRm9ybWF0LCBvYmpEYXRlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJhbnNmb3JtZWREYXRlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkYXRlRm9ybWF0KGRhdGVGb3JtYXQ6IHN0cmluZywgY29uZmlnRGF0ZTogTmd4Q29uZmlnRGF0ZSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gY29uZmlnRGF0ZVtmaWVsZENvbmZpZ0RhdGVbZGF0ZUZvcm1hdF1dO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXREYXRlQ29uZmlnKGxhbmdDb2RlOiBzdHJpbmcpOiBOZ3hDb25maWdEYXRlIHtcclxuICAgIGNvbnN0IGNvZGUgPSBsYW5nQ29kZSB8fCBzdXBwb3J0ZWRMYW5ndWFnZUNvZGVzWzBdO1xyXG4gICAgY29uc3QgY29uZmlnRGF0ZSA9IGRhdGVDb25maWdNYXBbY29kZV0gfHwgZGF0ZUNvbmZpZ01hcFtzdXBwb3J0ZWRMYW5ndWFnZUNvZGVzWzBdXTtcclxuICAgIHJldHVybiBjb25maWdEYXRlO1xyXG4gIH1cclxufVxyXG4iXX0=